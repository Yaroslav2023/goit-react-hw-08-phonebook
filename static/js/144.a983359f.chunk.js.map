{"version":3,"file":"static/js/144.a983359f.chunk.js","mappings":"+SACA,EAAwB,wBAAxB,EAAuD,uBAAvD,EAAqF,uB,4BCO/EA,EAAgB,CACpBC,MAAO,GACPC,KAAM,GACNC,SAAU,IA0FZ,EAvFiB,WACf,OAAgCC,EAAAA,EAAAA,WAAS,UAAKJ,IAA9C,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAAmBC,EAAAA,EAAAA,MAAZC,GAAP,eACA,GAAgBC,EAAAA,EAAAA,MAATC,GAAP,eAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBf,EAAR,EAAQA,KAAMgB,EAAd,EAAcA,MACdZ,GAAY,SAAAa,GAAS,yBAAUA,GAAV,cAAsBjB,EAAOgB,GAA7B,GACtB,EAEKE,EAAY,mCAAG,WAAMJ,GAAN,4EACnBA,EAAEK,mBAEEhB,EAASJ,OAASI,EAASH,MAAQG,EAASF,UAH7B,0CAKQK,EAASH,GALjB,mDAQUK,EAAM,CAC3BT,MAAOI,EAASJ,MAChBE,SAAUE,EAASF,WAVR,gBAQLmB,EARK,EAQLA,KAIRX,GAASY,EAAAA,EAAAA,IAASD,EAAKE,QACvBX,EAAS,KAbI,0DAgBfY,IAAAA,OAAAA,QAAA,mEAhBe,QAqBnBC,IArBmB,0DAAH,sDAwBZA,EAAQ,WACZpB,EAAYN,EACb,EAED,OACE,iBAAK2B,UAAWC,EAAhB,WACE,kBAAMC,SAAUT,EAAcO,UAAWC,EAAzC,WACE,eAAID,UAAWC,EAAf,sBACA,kBAAOE,QAAQ,OAAf,oBACA,kBACE5B,KAAK,OACL6B,KAAK,OACLC,aAAa,OACbC,UAAQ,EACRf,MAAOb,EAASH,KAChBgC,SAAUnB,EACVoB,YAAY,cAGd,kBAAOL,QAAQ,QAAf,qBACA,kBACE5B,KAAK,QACL6B,KAAK,QACLC,aAAa,QACbC,UAAQ,EACRf,MAAOb,EAASJ,MAChBiC,SAAUnB,EACVoB,YAAY,iBAGd,kBAAOL,QAAQ,WAAf,uBACA,kBACE5B,KAAK,WACL6B,KAAK,WACLE,UAAQ,EACRf,MAAOb,EAASF,SAChB+B,SAAUnB,EACVoB,YAAY,iBAGd,mBAAQJ,KAAK,SAAb,yBAEF,qDACA,0BACE,SAAC,KAAD,CAASK,GAAG,SAAZ,yBAIP,ECxFD,EARqB,WACnB,OACE,0BACE,SAAC,EAAD,KAGL,C,uBCTD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChB1B,EAAQ2B,EAAK3B,KAInB,CAHE,MAAO4B,GAEP,YADAN,EAAOM,EAET,CAEID,EAAKE,KACPR,EAAQrB,GAER8B,QAAQT,QAAQrB,GAAO+B,KAAKR,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMvB,GACbmB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQxB,EAClE,CAEA,SAASwB,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C","sources":["webpack://react-homework-template/./src/components/Register/register.module.css?fdc5","components/Register/Register.jsx","pages/RegisterPage.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login\":\"register_login__mS0WW\",\"form\":\"register_form__dXisD\",\"text\":\"register_text__dY6A0\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport { useLoginMutation, useRegisterMutation } from 'redux/auth';\nimport { setToken } from '../../redux/auth/authSlice';\nimport cl from './register.module.css';\nimport Notiflix from 'notiflix';\n\nconst INITIAL_STATE = {\n  email: '',\n  name: '',\n  password: '',\n};\n\nconst Register = () => {\n  const [formData, setFormData] = useState({ ...INITIAL_STATE });\n  const [register] = useRegisterMutation();\n  const [login] = useLoginMutation();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setFormData(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (formData.email && formData.name && formData.password) {\n      try {\n        const response = await register(formData);\n\n        if (response) {\n          const { data } = await login({\n            email: formData.email,\n            password: formData.password,\n          });\n          dispatch(setToken(data.token));\n          navigate('/');\n        }\n      } catch (error) {\n        Notiflix.Notify.warning(\n          `This user is already registered. Please Sign in to your account`\n        );\n      }\n    }\n    reset();\n  };\n\n  const reset = () => {\n    setFormData(INITIAL_STATE);\n  };\n\n  return (\n    <div className={cl.login}>\n      <form onSubmit={handleSubmit} className={cl.form}>\n        <h2 className={cl.text}>Sign up</h2>\n        <label htmlFor=\"name\">Name:</label>\n        <input\n          name=\"name\"\n          type=\"text\"\n          autoComplete=\"name\"\n          required\n          value={formData.name}\n          onChange={handleChange}\n          placeholder=\"Yaroslav\"\n        />\n\n        <label htmlFor=\"email\">Email:</label>\n        <input\n          name=\"email\"\n          type=\"email\"\n          autoComplete=\"email\"\n          required\n          value={formData.email}\n          onChange={handleChange}\n          placeholder=\"123@test.ua\"\n        />\n\n        <label htmlFor=\"password\">Password</label>\n        <input\n          name=\"password\"\n          type=\"password\"\n          required\n          value={formData.password}\n          onChange={handleChange}\n          placeholder=\"password...\"\n        />\n\n        <button type=\"submit\">Sign up</button>\n      </form>\n      <p>Already have an account?</p>\n      <div>\n        <NavLink to=\"/login\">Sign in</NavLink>\n      </div>\n    </div>\n  );\n};\n\nexport default Register;\n","import Register from 'components/Register';\nimport React from 'react';\n\nconst RegisterPage = () => {\n  return (\n    <div>\n      <Register />\n    </div>\n  );\n};\n\nexport default RegisterPage;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["INITIAL_STATE","email","name","password","useState","formData","setFormData","useRegisterMutation","register","useLoginMutation","login","dispatch","useDispatch","navigate","useNavigate","handleChange","e","target","value","prevState","handleSubmit","preventDefault","data","setToken","token","Notiflix","reset","className","cl","onSubmit","htmlFor","type","autoComplete","required","onChange","placeholder","to","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}